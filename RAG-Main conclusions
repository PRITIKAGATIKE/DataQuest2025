from dotenv import load_dotenv
load_dotenv()
from langchain_openai import OpenAIEmbeddings
from langchain_openai import OpenAI

import os
api_key = os.getenv("OPENAI_API_KEY")


embeddings = OpenAIEmbeddings(openai_api_key=api_key, model="text-embedding-ada-002")
llm = OpenAI(openai_api_key=api_key)




from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.document_loaders import TextLoader
from langchain_community.vectorstores import FAISS



from langchain_community.llms import OpenAI

from langchain.chains import RetrievalQA
embeddings = OpenAIEmbeddings(model="text-embedding-ada-002")

loading=TextLoader("Transcript.txt")
doc_0=loading.load()
text_splitting=RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
chunks = text_splitting.split_documents(doc_0)


vectorstore=FAISS.from_documents(chunks,embeddings)
retriever=vectorstore.as_retriever()
qa=RetrievalQA.from_chain_type(llm=OpenAI(), retriever=retriever)
query="What are the main conclusions?"
result = qa.run(query)

print("\nAnswer:")
print(result)
